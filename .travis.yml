# Ubuntu (xenial) as operating system
dist: xenial

# Setup rust environment with stable & newest language branch
language: rust
rust:
  - stable
  - nightly
# Ignore failures in nightly release and don't wait for it
matrix:
  allow_failures:
    - rust: nightly
  fast_finish: true
# Cache build dependencies
cache: cargo

# Add X Virtual Framebuffer for system graphics layer
services:
  - xvfb

# Add system dependencies
addons:
  apt:
    sources:
      - sourceline: 'ppa:djcj/vapoursynth'
    packages:
      - python3
      - vapoursynth
      # Fix X server plugins for OpenGL
      - libxrandr-dev
      - libxinerama-dev
      # CodeCov / kcov requirements
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev

# Fix Vapoursynth-Script library link
before_script: sudo ln -s /usr/lib/x86_64-linux-gnu/libvapoursynth-script.so.0 /usr/lib/x86_64-linux-gnu/libvapoursynth-script.so

# Execute rust builds & tests
script:
  - cargo build --verbose
  - cargo test --verbose

# After builds & tests, upload code coverage
after_success: |
  test $TRAVIS_RUST_VERSION != stable || (  # Continue just for build with stable rust!
  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz && # Download kcov sources
  tar xzf master.tar.gz && cd kcov-master &&  # Unzip kcov sources
  mkdir build && cd build &&  # Make intermediate kcov build directory
  cmake .. && make && # Generate Makefile by CMake and build kcov
  sudo make install &&  # Install kcov to system
  cd ../.. && rm -rf kcov-master && # Delete kcov sources
  for file in target/debug/*_tests-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done && # Generate code coverage reports
  bash <(curl -s https://codecov.io/bash) &&  # Upload code coverage reports (by environment variable CODECOV_TOKEN)
  echo "Uploaded code coverage" # Print finish message
  )

# Deploy build to release platform
deploy:
  provider: script  # Script execution
  script: cargo login $CRATES_TOKEN; cargo publish --manifest-path ssb_parser/Cargo.toml || true; cargo publish --manifest-path ssb_renderer/Cargo.toml || true; cargo publish --manifest-path ssb_filter/Cargo.toml || true # Link to crates.io and publish ssb_* projects
  on:
    rust: stable  # Just for build with stable rust!
    tags: true  # Commit must be tagged!